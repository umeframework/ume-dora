package ${dto.tableCrudServicePackage};

import java.util.List;
import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.umeframework.dora.context.RequestContext;
import org.umeframework.dora.dao.RdbDao;
import ${dto.classPackage}.${dto.classId};
import ${dto.tableCrudServiceInterfacePackage}.${dto.tableCrudServiceInterface};

/**
 * ${dto.TblName}:${dto.tblId} CRUD service implementation.<br>
 *
 * @author UME-Generator
 */
@Service
public class ${dto.tableCrudServiceClass} implements ${dto.tableCrudServiceInterface} {
    /**
     * RdbDao
     */
    @Resource
    private RdbDao dao;

#if(${dto.tblHistory} != '')
    /**
     * Enable operation history table automatic insert flag.<br>
     */
    private boolean enableOperationHistory = true;
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#setEnableOperationHistory
     */
    @Override
    public void setEnableOperationHistory(boolean enable) {
        this.enableOperationHistory = enable;
    }
#end

#if(${dto.primaryKeyFieldList.size()} > 0)
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#create
     */
    @Override
	public Integer create(${dto.classId} entity) {
#if(${dto.tblHistory} != '')
        if (enableOperationHistory) {
            // insert modified history
            if (entity.getCreateAuthor() == null) {
                entity.setCreateAuthor(getUid());
            }
            getDao().update(${dto.classId}.SQLID.INSERT_HISTORY_C, entity);
        }
#end
#if(${dto.generateDefaultTableField} == 1)
        if (entity.getCreateAuthor() == null) {
            entity.setCreateAuthor(getUid());
        }
        if (entity.getUpdateAuthor() == null) {
            entity.setUpdateAuthor(getUid());
        }
#end
        int result = getDao().update(${dto.classId}.SQLID.INSERT, entity);
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#createList
     */
    @Override
    public List<Integer> createList(List<${dto.classId}> entityList) {
        List<Integer> result = new java.util.ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(create(entity));
        }
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#createOrUpdate
     */
    @Override
    public Integer createOrUpdate(${dto.classId} entity) {
        ${dto.classId} existed = getDao().queryForObject(${dto.classId}.SQLID.FIND, entity, ${dto.classId}.class);
        if (existed == null) {
            return create(entity);
        } else {
            return update(entity);
        }
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#createOrUpdateList
     */
    @Override
    public List<Integer> createOrUpdateList(List<${dto.classId}> entityList) {
        List<Integer> result = new java.util.ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(createOrUpdate(entity));
        }
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#update
     */
    @Override
    public Integer update(${dto.classId} entity) {
#if(${dto.tblHistory} != '')
        if (enableOperationHistory) {
            // insert modified history
            if (entity.getCreateAuthor() == null) {
                entity.setCreateAuthor(getUid());
            }
            getDao().update(${dto.classId}.SQLID.INSERT_HISTORY_U, find(entity));
        }
#end
#if(${dto.generateDefaultTableField} == 1)
        if (entity.getUpdateAuthor() == null) {
            entity.setUpdateAuthor(getUid());
        }
#end
        int result = getDao().update(${dto.classId}.SQLID.UPDATE, entity);
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#updateList
     */
    @Override
    public List<Integer> updateList(List<${dto.classId}> entityList) {
        List<Integer> result = new java.util.ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(update(entity));
        }
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#delete
     */
    @Override
    public Integer delete(${dto.classId} entity) {
#if(${dto.tblHistory} != '')
        if (enableOperationHistory) {
            // insert modified history
            if (entity.getCreateAuthor() == null) {
                entity.setCreateAuthor(getUid());
            }
            getDao().update(${dto.classId}.SQLID.INSERT_HISTORY_D, find(entity));
        }
#end
        int result = getDao().update(${dto.classId}.SQLID.DELETE, entity);
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#deleteList
     */
    @Override
    public List<Integer> deleteList(List<${dto.classId}> entityList) {
        List<Integer> result = new java.util.ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(delete(entity));
        }
        return result;
    }

    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#find
     */
    @Override
    public ${dto.classId} find(${dto.classId} criteria) {
        return getDao().queryForObject(${dto.classId}.SQLID.FIND, criteria, ${dto.classId}.class);
    }
#end    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#findList
     */
    @Override
    public List<${dto.classId}> findList(${dto.classId} criteria) {
        return getDao().queryForObjectList(${dto.classId}.SQLID.FIND_LIST, criteria, ${dto.classId}.class);
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}#findListLike
     */
    @Override
    public List<${dto.classId}> findListLike(${dto.classId} criteria) {
        return getDao().queryForObjectList(${dto.classId}.SQLID.FIND_LIST_LIKE, criteria, ${dto.classId}.class);
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    public Integer count(${dto.classId} criteria) {
        return getDao().count(${dto.classId}.SQLID.COUNT, criteria);
    }

	/**
	 * @return the uid
	 */
	public String getUid() {
		return RequestContext.getCurrentContext().get("UID");
	}
	
	/**
	 * @return the dao
	 */
	public RdbDao getDao() {
		return dao;
	}

}
