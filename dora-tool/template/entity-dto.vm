#set($var_LeftBrackets="(")
#set($var_CREATE_AUTHOR="CREATE_AUTHOR")
#set($var_CREATE_DATETIME="CREATE_DATETIME")
#set($var_UPDATE_AUTHOR="UPDATE_AUTHOR")
#set($var_UPDATE_DATETIME="UPDATE_DATETIME")
#set($var_createAuthor="createAuthor")
#set($var_createDatetime="createDatetime")
#set($var_updateAuthor="updateAuthor")
#set($var_updateDatetime="updateDatetime")
#set($var_CreateAuthorAccessor="CreateAuthor")
#set($var_CreateDatetimeAccessor="CreateDatetime")
#set($var_UpdateAuthorAccessor="UpdateAuthor")
#set($var_UpdateDatetimeAccessor="UpdateDatetime")

#set($var_theSchema="_theSchema")
#set($var_theDivision="_theDivision")
#set($var_theOrderByCondition="_theOrderByCondition")
#set($var_theGroupByCondition="_theGroupByCondition")
#set($var_theSQLCondition="_theSQLCondition")
#set($var_theFetchSize="_theFetchSize")
#set($var_theFetchStart="_theFetchStart")

package $dto.classPackage;

import java.io.Serializable;
import org.apache.commons.lang.StringEscapeUtils;
#foreach ( $classImport in $dto.classImportList )
$classImport
#end

/**
 * Entity class map to table "$dto.className"
 *
 * @author ume-team
 */
#foreach ( $classAnnotation in $dto.classAnnotationList )
$classAnnotation
#end
public class $dto.classId implements Serializable {
   /**
    * Default serial version code
    */
    private static final long serialVersionUID = 1L;

#foreach ( $field in $dto.fieldList )
   /**
    * $field.fieldName 
#if ($field.colComment != "" && $field.colComment != "null")
    * $field.colComment
#end   
    */
#foreach ( $fieldAnnotation in $field.fieldAnnotationList )
    $fieldAnnotation
#end
    private $field.fieldType $field.fieldId;

#end
#if(${dto.generateDefaultTableField} == 1)
   /**
    * Create Author (default setting while insert)
    */
    @Column(name="${var_CREATE_AUTHOR}", nullable=true, length=32)
    private String ${var_createAuthor};
   /**
    * Create Datetime (default setting while insert)
    */
    @Column(name="${var_CREATE_DATETIME}", nullable=true)
    private java.sql.Timestamp ${var_createDatetime};
   /**
    * Update Author (refresh on each update)
    */
    @Column(name="${var_UPDATE_AUTHOR}", nullable=true, length=32)
    private String ${var_updateAuthor};
   /**
    * Update Datetime (refresh on each update)
    */
    @Column(name="${var_UPDATE_DATETIME}", nullable=true)
    private java.sql.Timestamp ${var_updateDatetime};
#end
	/**
     * table schema, default is empty
     */
    private String ${var_theSchema};
    /**
     * table division, default is empty
     */
    private String ${var_theDivision};
    /**
     * SQL Order By condition parameter
     */
    private String ${var_theOrderByCondition};
    /**
     * SQL Group By condition parameter
     */
    private String ${var_theGroupByCondition};
    /**
     * Dynamic SQL query condition parameter
     */
    private String ${var_theSQLCondition};
    /**
     * fetch max size
     */
    private Integer ${var_theFetchSize};
    /**
     * fetch begin index
     */
    private Integer ${var_theFetchStart};

#foreach ( $field in $dto.fieldList )
    /**
     *　Get the "$field.fieldName"
     */
    public $field.fieldType get$field.fieldIdCap${var_LeftBrackets}) {
        return this.$field.fieldId;
    }
    /**
     *　Set the "$field.fieldName"
     */
    public void set$field.fieldIdCap${var_LeftBrackets}
            $field.fieldType $field.fieldId) {
        this.$field.fieldId = $field.fieldId;
    }

#end
#if(${dto.generateDefaultTableField} == 1)
    /**
     * Get the "Create Auther"
     */
    public String get${var_CreateAuthorAccessor}() {
        return ${var_createAuthor};
    }
    /**
     * Set the "Create Auther"
     */
    public void set${var_CreateAuthorAccessor}(
            String ${var_createAuthor}) {
        this.${var_createAuthor} = ${var_createAuthor};
    }

    /**
     * Get the "Create Datetime"
     */
    public java.sql.Timestamp get${var_CreateDatetimeAccessor}() {
        return ${var_createDatetime};
    }
    /**
     * Set the "Create Datetime"
     */
    public void set${var_CreateDatetimeAccessor}(
            java.sql.Timestamp ${var_createDatetime}) {
        this.${var_createDatetime} = ${var_createDatetime};
    }

    /**
     * Get the "Update Auther"
     */
    public String get${var_UpdateAuthorAccessor}() {
        return ${var_updateAuthor};
    }
    /**
     * Set the "Update Auther"
     */
    public void set${var_UpdateAuthorAccessor}(
            String ${var_updateAuthor}) {
        this.${var_updateAuthor} = ${var_updateAuthor};
    }

    /**
     * Get the "Update Datetime"
     */
    public java.sql.Timestamp get${var_UpdateDatetimeAccessor}() {
        return ${var_updateDatetime};
    }
    /**
     * Set the "Update Datetime"
     */
    public void set${var_UpdateDatetimeAccessor}(
            java.sql.Timestamp ${var_updateDatetime}) {
        this.${var_updateDatetime} = ${var_updateDatetime};
    }
#end
    /**
     * @return the ${var_theSchema}
     */
    public String get${var_theSchema}() {
        return StringEscapeUtils.escapeSql(${var_theSchema});
    }
    /**
     * @param ${var_theSchema}
     *            the ${var_theSchema} to set
     */
    public void set${var_theSchema}(
            String ${var_theSchema}) {
        this.${var_theSchema} = StringEscapeUtils.escapeSql(${var_theSchema});
    }
    /**
     * @return the ${var_theDivision}
     */
    public String get${var_theDivision}() {
        return StringEscapeUtils.escapeSql(${var_theDivision});
    }
    /**
     * @param ${var_theDivision}
     *            the ${var_theDivision} to set
     */
    public void set${var_theDivision}(
            String ${var_theDivision}) {
        if (${var_theDivision} != null && ${var_theDivision}.contains(" ")) {
            throw new RuntimeException("Found illegal SQL characters input for set${var_theDivision}:" + ${var_theDivision});
        }
        this.${var_theDivision} = StringEscapeUtils.escapeSql(${var_theDivision});
    }
    /**
     * @return the ${var_theOrderByCondition}
     */
    public String get${var_theOrderByCondition}() {
        return StringEscapeUtils.escapeSql(${var_theOrderByCondition});
    }
    /**
     * @param  ${var_theOrderByCondition}
     *            the  ${var_theOrderByCondition} to set
     */
    public void set${var_theOrderByCondition}(
            String  ${var_theOrderByCondition}) {

        this.${var_theOrderByCondition} = StringEscapeUtils.escapeSql(${var_theOrderByCondition});
    }
    /**
     * @return the ${var_theGroupByCondition}
     */
    public String get${var_theGroupByCondition}() {
        return StringEscapeUtils.escapeSql(${var_theGroupByCondition});
    }
    /**
     * @param ${var_theGroupByCondition}
     *            the ${var_theGroupByCondition} to set
     */
    public void set${var_theGroupByCondition}(
            String ${var_theGroupByCondition}) {
        this.${var_theGroupByCondition} = StringEscapeUtils.escapeSql(${var_theGroupByCondition});
    }
    /**
     * @return the ${var_theSQLCondition}
     */
    public String get${var_theSQLCondition}() {
        return StringEscapeUtils.escapeSql(${var_theSQLCondition});
    }
    /**
     * @param ${var_theSQLCondition} the ${var_theSQLCondition} to set
     */
    public void set${var_theSQLCondition}(
            String ${var_theSQLCondition}) {
        this.${var_theSQLCondition} = StringEscapeUtils.escapeSql(${var_theSQLCondition});
    }
    /**
     * @return the ${var_theFetchStart}
     */
    public Integer get${var_theFetchStart}() {
        return ${var_theFetchStart};
    }
    /**
     * @param ${var_theFetchStart} the ${var_theFetchStart} to set
     */
    public void set${var_theFetchStart}(
            Integer ${var_theFetchStart}) {
        this.${var_theFetchStart} = ${var_theFetchStart};
    }
    /**
     * @return the ${var_theFetchSize}
     */
    public Integer get${var_theFetchSize}() {
        return ${var_theFetchSize};
    }
    /**
     * @param ${var_theFetchSize}
     *            the ${var_theFetchSize} to set
     */
    public void set${var_theFetchSize}(
            Integer ${var_theFetchSize}) {
        this.${var_theFetchSize} = ${var_theFetchSize};
    }
    /**
     * clearDefaultProperties
     */
    public void clearDefaultProperties() {
        this.set${var_theSchema}(null);
        this.set${var_theDivision}(null);
        this.set${var_theOrderByCondition}(null);
        this.set${var_theGroupByCondition}(null);
        this.set${var_theSQLCondition}(null);
        this.set${var_theFetchSize}(null);
        this.set${var_theFetchStart}(null);
    }
    /**
     * Create bean instance copy with selected properties
     * 
     * @param selectProperties
     *            - properties which copy to new instance
     * @return
     */
    /* 
    public ${dto.classId} copyFrom(
            Property... selectProperties) {
        if (selectProperties == null) {
            return null;
        }
        ${dto.classId} newInstance = new ${dto.classId}();
        for (Property property : selectProperties) {
            String name = property.toString();
            Object value = org.umeframework.dora.bean.BeanUtil.BeanUtil.getBeanProperty(this, name);
            org.umeframework.dora.bean.BeanUtil.BeanUtil.setBeanProperty(newInstance, name, value);
        }
        return newInstance;
    } */
    
    /**
     * Constant declare: SQL ID in config file
     */
    public static class SQLID {
        public static final String FIND_LIST = "${dto.classPackage}.${dto.tblAlias}_FIND_LIST";
        public static final String FIND_LIST_LIKE = "${dto.classPackage}.${dto.tblAlias}_FIND_LIST_LIKE";
        public static final String COUNT = "${dto.classPackage}.${dto.tblAlias}_COUNT";
#if(${dto.primaryKeyFieldList.size()} > 0)
        public static final String FIND = "${dto.classPackage}.${dto.tblAlias}_FIND";
        public static final String FIND_FOR_UPDATE = "${dto.classPackage}.${dto.tblAlias}_FIND_FOR_UPDATE";
        public static final String INSERT = "${dto.classPackage}.${dto.tblAlias}_INSERT";
        public static final String UPDATE = "${dto.classPackage}.${dto.tblAlias}_UPDATE";
        public static final String UPDATE_FULLY = "${dto.classPackage}.${dto.tblAlias}_UPDATE_FULLY";
        public static final String UPDATE_ANY = "${dto.classPackage}.${dto.tblAlias}_UPDATE_ANY";
        public static final String DELETE = "${dto.classPackage}.${dto.tblAlias}_DELETE";
        public static final String DELETE_ANY = "${dto.classPackage}.${dto.tblAlias}_DELETE_ANY";
#end
#if(${dto.tblHistory} != '')
        public static final String INSERT_HISTORY_C = "${dto.classPackage}.${dto.tblAlias}_${dto.tblHistory}_INSERT_C"; 
        public static final String INSERT_HISTORY_U = "${dto.classPackage}.${dto.tblAlias}_${dto.tblHistory}_INSERT_U"; 
        public static final String INSERT_HISTORY_D = "${dto.classPackage}.${dto.tblAlias}_${dto.tblHistory}_INSERT_D"; 
#end
    } 

    /**
     * Constant declare: entity property name.<br>
     */
    public static class Property {
#foreach ( ${field} in ${dto.fieldList} )
        public static final String ${field.fieldId} = "${field.fieldId}";
#end
#if(${dto.generateDefaultTableField} == 1)
        public static final String ${var_createAuthor} = "${var_createAuthor}";
        public static final String ${var_createDatetime} = "${var_createDatetime}";
        public static final String ${var_updateAuthor} = "${var_updateAuthor}";
        public static final String ${var_updateDatetime} = "${var_updateDatetime}";
#end
        public static final String ${var_theGroupByCondition} = "${var_theGroupByCondition}";
        public static final String ${var_theOrderByCondition} = "${var_theOrderByCondition}";
        public static final String ${var_theSchema} = "${var_theSchema}";
        public static final String ${var_theDivision} = "${var_theDivision}";
        public static final String ${var_theFetchSize} = "${var_theFetchSize}";
        public static final String ${var_theFetchStart} = "${var_theFetchStart}";
    }
    
    /**
     * Constant declare: column name map with bean property.<br>
     */
    public static class ColumnName {
#foreach ( ${field} in ${dto.fieldList} )
        public static final String ${field.colId} = "${field.colId}";
#end
#if(${dto.generateDefaultTableField} == 1)
        public static final String ${var_CREATE_AUTHOR} = "${var_CREATE_AUTHOR}";
        public static final String ${var_CREATE_DATETIME} = "${var_CREATE_DATETIME}";
        public static final String ${var_UPDATE_AUTHOR} = "${var_UPDATE_AUTHOR}";
        public static final String ${var_UPDATE_DATETIME} = "${var_UPDATE_DATETIME}";
#end
    }
    /**
     * Constant declare: table name.<br>
     */
    public static String TableName = "${dto.tblId}";

}
