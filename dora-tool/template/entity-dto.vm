#set($var_LeftBrackets="(")
#set($var_CREATE_AUTHOR="CREATE_AUTHOR")
#set($var_CREATE_DATETIME="CREATE_DATETIME")
#set($var_UPDATE_AUTHOR="UPDATE_AUTHOR")
#set($var_UPDATE_DATETIME="UPDATE_DATETIME")
#set($var_createAuthor="createAuthor")
#set($var_createDatetime="createDatetime")
#set($var_updateAuthor="updateAuthor")
#set($var_updateDatetime="updateDatetime")
#set($var_CreateAuthorAccessor="CreateAuthor")
#set($var_CreateDatetimeAccessor="CreateDatetime")
#set($var_UpdateAuthorAccessor="UpdateAuthor")
#set($var_UpdateDatetimeAccessor="UpdateDatetime")
#set($var_theDivision="_theDivision")
#set($var_theOrderByCondition="_theOrderByCondition")
#set($var_theSqlCondition="_theSqlCondition")
#set($var_theFetchSize="_theFetchSize")
#set($var_theFetchStart="_theFetchStart")

package ${dto.tableDtoPackage};

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang.StringEscapeUtils;
#foreach ( $classImport in $dto.classImportList )
$classImport
#end

/**
 * 数据表"$dto.className"实体类<br>
 *
 * @author Generator
 */
#foreach ( $classAnnotation in $dto.classAnnotationList )
$classAnnotation
#end
@ApiModel(value="${dto.tableDtoClass}", description="$dto.className")
public class ${dto.tableDtoClass} implements Serializable {
   /**
    * Default serial version number<br>
    */
    private static final long serialVersionUID = 1L;

#foreach ( $field in $dto.fieldList )
   /**
    * $field.fieldName<br>
    */
#foreach ( $fieldAnnotation in $field.fieldAnnotationList )
    $fieldAnnotation
#end
#if ($field.colPK != "" || $field.colNotNull != "")
    @NotNull
#end
    @ApiModelProperty(value="$field.fieldName", name="$field.fieldId"#if ($field.colPK != "" || $field.colNotNull != ""), required=true#end)
    private $field.fieldType $field.fieldId;

#end
#if(${dto.generateDefaultTableField} == 1)
   /**
    * Create Author (default setting while insert)
    */
    @Column(name="${var_CREATE_AUTHOR}", nullable=true, length=32)
    private String ${var_createAuthor};
   /**
    * Create Datetime (default setting while insert)
    */
    @Column(name="${var_CREATE_DATETIME}", nullable=true)
    private java.sql.Timestamp ${var_createDatetime};
   /**
    * Update Author (refresh on each update)
    */
    @Column(name="${var_UPDATE_AUTHOR}", nullable=true, length=32)
    private String ${var_updateAuthor};
   /**
    * Update Datetime (refresh on each update)
    */
    @Column(name="${var_UPDATE_DATETIME}", nullable=true)
    private java.sql.Timestamp ${var_updateDatetime};
#end
    /**
     * table division, default is empty
     */
    private String ${var_theDivision};
    /**
     * SQL Order By condition parameter
     */
    private String ${var_theOrderByCondition};
    /**
     * Dynamic SQL query condition parameter
     */
    private String ${var_theSqlCondition};
    /**
     * fetch max size
     */
    private Integer ${var_theFetchSize};
    /**
     * fetch begin index
     */
    private Integer ${var_theFetchStart};

#foreach ( $field in $dto.fieldList )
    /**
     *　Get the "$field.fieldName"
     */
    public $field.fieldType get$field.fieldIdCap${var_LeftBrackets}) {
        return this.$field.fieldId;
    }
    /**
     *　Set the "$field.fieldName"
     */
    public void set$field.fieldIdCap${var_LeftBrackets}
            $field.fieldType $field.fieldId) {
        this.$field.fieldId = $field.fieldId;
    }

#end
#if(${dto.generateDefaultTableField} == 1)
    /**
     * Get the "Create Auther"
     */
    public String get${var_CreateAuthorAccessor}() {
        return ${var_createAuthor};
    }
    /**
     * Set the "Create Auther"
     */
    public void set${var_CreateAuthorAccessor}(
            String ${var_createAuthor}) {
        this.${var_createAuthor} = ${var_createAuthor};
    }

    /**
     * Get the "Create Datetime"
     */
    public java.sql.Timestamp get${var_CreateDatetimeAccessor}() {
        return ${var_createDatetime};
    }
    /**
     * Set the "Create Datetime"
     */
    public void set${var_CreateDatetimeAccessor}(
            java.sql.Timestamp ${var_createDatetime}) {
        this.${var_createDatetime} = ${var_createDatetime};
    }

    /**
     * Get the "Update Auther"
     */
    public String get${var_UpdateAuthorAccessor}() {
        return ${var_updateAuthor};
    }
    /**
     * Set the "Update Auther"
     */
    public void set${var_UpdateAuthorAccessor}(
            String ${var_updateAuthor}) {
        this.${var_updateAuthor} = ${var_updateAuthor};
    }

    /**
     * Get the "Update Datetime"
     */
    public java.sql.Timestamp get${var_UpdateDatetimeAccessor}() {
        return ${var_updateDatetime};
    }
    /**
     * Set the "Update Datetime"
     */
    public void set${var_UpdateDatetimeAccessor}(
            java.sql.Timestamp ${var_updateDatetime}) {
        this.${var_updateDatetime} = ${var_updateDatetime};
    }
#end
    /**
     * @return the ${var_theDivision}
     */
    public String get${var_theDivision}() {
        return StringEscapeUtils.escapeSql(${var_theDivision});
    }
    /**
     * @param ${var_theDivision}
     *            the ${var_theDivision} to set
     */
    public void set${var_theDivision}(
            String ${var_theDivision}) {
        if (${var_theDivision} != null && ${var_theDivision}.contains(" ")) {
            throw new RuntimeException("Found illegal SQL characters input for set${var_theDivision}:" + ${var_theDivision});
        }
        this.${var_theDivision} = StringEscapeUtils.escapeSql(${var_theDivision});
    }
    /**
     * @return the ${var_theOrderByCondition}
     */
    public String get${var_theOrderByCondition}() {
        return StringEscapeUtils.escapeSql(${var_theOrderByCondition});
    }
    /**
     * @param  ${var_theOrderByCondition}
     *            the  ${var_theOrderByCondition} to set
     */
    public void set${var_theOrderByCondition}(
            String  ${var_theOrderByCondition}) {

        this.${var_theOrderByCondition} = StringEscapeUtils.escapeSql(${var_theOrderByCondition});
    }
    /**
     * @return the ${var_theSqlCondition}
     */
    public String get${var_theSqlCondition}() {
        return StringEscapeUtils.escapeSql(${var_theSqlCondition});
    }
    /**
     * @param ${var_theSqlCondition} the ${var_theSqlCondition} to set
     */
    public void set${var_theSqlCondition}(
            String ${var_theSqlCondition}) {
        this.${var_theSqlCondition} = StringEscapeUtils.escapeSql(${var_theSqlCondition});
    }
    /**
     * @return the ${var_theFetchStart}
     */
    public Integer get${var_theFetchStart}() {
        return ${var_theFetchStart};
    }
    /**
     * @param ${var_theFetchStart} the ${var_theFetchStart} to set
     */
    public void set${var_theFetchStart}(
            Integer ${var_theFetchStart}) {
        this.${var_theFetchStart} = ${var_theFetchStart};
    }
    /**
     * @return the ${var_theFetchSize}
     */
    public Integer get${var_theFetchSize}() {
        return ${var_theFetchSize};
    }
    /**
     * @param ${var_theFetchSize}
     *            the ${var_theFetchSize} to set
     */
    public void set${var_theFetchSize}(
            Integer ${var_theFetchSize}) {
        this.${var_theFetchSize} = ${var_theFetchSize};
    }
    /**
     * clearDefaultProperties
     */
    public void clearDefaultProperties() {
        this.set${var_theDivision}(null);
        this.set${var_theOrderByCondition}(null);
        this.set${var_theSqlCondition}(null);
        this.set${var_theFetchSize}(null);
        this.set${var_theFetchStart}(null);
    }
    
    /* (non-Javadoc)
     * @see java.lang.Object
     */
    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        ${dto.tableDtoClass} other = (${dto.tableDtoClass}) that;
        return
#foreach ( $field in $dto.fieldList )
           #if(${velocityCount} > 1) && #end (this.get$field.fieldIdCap${var_LeftBrackets}) == null ? other.get$field.fieldIdCap${var_LeftBrackets}) == null : this.get$field.fieldIdCap${var_LeftBrackets}).equals(other.get$field.fieldIdCap${var_LeftBrackets})))
#end        ;
    }
    /* (non-Javadoc)
     * @see java.lang.Object
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
#foreach ( $field in $dto.fieldList )
        result = prime * result + ((get$field.fieldIdCap${var_LeftBrackets}) == null) ? 0 : get$field.fieldIdCap${var_LeftBrackets}).hashCode());
#end
        return result;
    }
    /* (non-Javadoc)
     * @see java.lang.Object
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
#foreach ( $field in $dto.fieldList )
        sb.append(", ${field.fieldId}=").append(${field.fieldId});
#end
        sb.append("]");
        return sb.toString();
    }

    /**
     * Constant declare: SQL ID in config file
     */
    public static class SQLID {
        public static final String FIND_LIST = "${dto.tableDtoPackage}.${dto.tblAlias}_FIND_LIST";
        public static final String FIND_LIST_LIKE = "${dto.tableDtoPackage}.${dto.tblAlias}_FIND_LIST_LIKE";
        public static final String COUNT = "${dto.tableDtoPackage}.${dto.tblAlias}_COUNT";
#if(${dto.primaryKeyFieldList.size()} > 0)
        public static final String FIND = "${dto.tableDtoPackage}.${dto.tblAlias}_FIND";
        public static final String FIND_FOR_UPDATE = "${dto.tableDtoPackage}.${dto.tblAlias}_FIND_FOR_UPDATE";
        public static final String INSERT = "${dto.tableDtoPackage}.${dto.tblAlias}_INSERT";
        public static final String UPDATE = "${dto.tableDtoPackage}.${dto.tblAlias}_UPDATE";
        public static final String UPDATE_FULLY = "${dto.tableDtoPackage}.${dto.tblAlias}_UPDATE_FULLY";
        public static final String UPDATE_ANY = "${dto.tableDtoPackage}.${dto.tblAlias}_UPDATE_ANY";
        public static final String DELETE = "${dto.tableDtoPackage}.${dto.tblAlias}_DELETE";
        public static final String DELETE_ANY = "${dto.tableDtoPackage}.${dto.tblAlias}_DELETE_ANY";
#end
#if(${dto.tblHistory} != '')
        public static final String INSERT_HISTORY_C = "${dto.tableDtoPackage}.${dto.tblAlias}_${dto.tblHistory}_INSERT_C"; 
        public static final String INSERT_HISTORY_U = "${dto.tableDtoPackage}.${dto.tblAlias}_${dto.tblHistory}_INSERT_U"; 
        public static final String INSERT_HISTORY_D = "${dto.tableDtoPackage}.${dto.tblAlias}_${dto.tblHistory}_INSERT_D"; 
#end
    } 

    /**
     * Constant declare: entity property name.<br>
     */
    public static class Property {
#foreach ( ${field} in ${dto.fieldList} )
        public static final String ${field.fieldId} = "${field.fieldId}";
#end
#if(${dto.generateDefaultTableField} == 1)
        public static final String ${var_createAuthor} = "${var_createAuthor}";
        public static final String ${var_createDatetime} = "${var_createDatetime}";
        public static final String ${var_updateAuthor} = "${var_updateAuthor}";
        public static final String ${var_updateDatetime} = "${var_updateDatetime}";
#end
        public static final String ${var_theSqlCondition} = "${var_theSqlCondition}";
        public static final String ${var_theOrderByCondition} = "${var_theOrderByCondition}";
        public static final String ${var_theDivision} = "${var_theDivision}";
        public static final String ${var_theFetchSize} = "${var_theFetchSize}";
        public static final String ${var_theFetchStart} = "${var_theFetchStart}";
    }
    
    /**
     * Constant declare: column name map with bean property.<br>
     */
    public static class ColumnName {
#foreach ( ${field} in ${dto.fieldList} )
        public static final String ${field.colId} = "${field.colId}";
#end
#if(${dto.generateDefaultTableField} == 1)
        public static final String ${var_CREATE_AUTHOR} = "${var_CREATE_AUTHOR}";
        public static final String ${var_CREATE_DATETIME} = "${var_CREATE_DATETIME}";
        public static final String ${var_UPDATE_AUTHOR} = "${var_UPDATE_AUTHOR}";
        public static final String ${var_UPDATE_DATETIME} = "${var_UPDATE_DATETIME}";
#end
    }
    /**
     * Constant declare: table name.<br>
     */
    public static String TableName = "${dto.tblId}";

}
