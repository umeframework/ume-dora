#set($LeftBrackets="(")
#set($CREATE_AUTHOR="CREATE_AUTHOR")
#set($CREATE_DATETIME="CREATE_DATETIME")
#set($UPDATE_AUTHOR="UPDATE_AUTHOR")
#set($UPDATE_DATETIME="UPDATE_DATETIME")
#set($CreateAuthor="CreateAuthor")
#set($CreateDatetime="CreateDatetime")
#set($UpdateAuthor="UpdateAuthor")
#set($UpdateDatetime="UpdateDatetime")
#set($Dot=".")
#set($EntityId="${dto.classOriId}Entity")
#set($DtoId="${dto.classOriId}Dto")
#set($FrameworkPackage="gear")
#set($Package="dto")
package ${Package}
import (
    "database/sql"
    ."${FrameworkPackage}/orm"
)

// '${dto.className}'表实体结构(基础类型描述)
type ${DtoId} struct {
#foreach (${field} in ${dto.fieldList})
    // ${field.fieldName}
    ${field.fieldIdCap} #renderGoType(${field})

#end
    // 创建者
    ${CreateAuthor} string
    // 创建时间
    ${CreateDatetime} string
    // 更新者
    ${UpdateAuthor} string
    // 更新时间
    ${UpdateDatetime} string
}

// '${dto.className}'表实体结构(SQL类型描述)
type ${EntityId} struct {
#foreach (${field} in ${dto.fieldList})
    // ${field.fieldName} 
    ${field.fieldIdCap} #renderGoSqlType(${field}) #renderDatabaseTag(${field})
#end
    // 创建者
    ${CreateAuthor} sql.NullString `name:"${CREATE_AUTHOR}",  type:"VARCHAR", comment:"创建者", key:false, notnull:false`
    // 创建时间
    ${CreateDatetime} sql.NullString `name:"${CREATE_DATETIME}",  type:"TIMESTAMP", comment:"创建时间", key:false, notnull:false`
    // 更新者
    ${UpdateAuthor} sql.NullString `name:"${UPDATE_AUTHOR}",  type:"VARCHAR", comment:"更新者", key:false, notnull:false`
    // 更新时间
    ${UpdateDatetime} sql.NullString `name:"${UPDATE_DATETIME}",  type:"TIMESTAMP", comment:"更新时间", key:false, notnull:false`
}

// 返回'${dto.className}'表名
func (owner *${EntityId}) TableName() string {
    return "${dto.tblId}"
}

// 从'map'创建
func (owner *${EntityId}) FromMap(src map[string]interface{}) *${EntityId} {
    var value interface{}
    var exist bool
#foreach (${field} in ${dto.fieldList})
    value,exist = src["${field.fieldIdCap}"]
    if exist {
#if (${field.fieldType}=='java.sql.Timestamp' || ${field.fieldType}=='java.sql.Time'|| ${field.fieldType}=='java.sql.Date')
        if value != "" {
            owner.${field.fieldIdCap} = #renderGoSqlType(${field}){#renderGoTypeFistCap(${field}):value.(#renderGoType(${field})), Valid:true}
        }
#else
        owner.${field.fieldIdCap} = #renderGoSqlType(${field}){#renderGoTypeFistCap(${field}):value.(#renderGoType(${field})), Valid:true}
#end
    }
#end
    value,exist = src["${CreateAuthor}"]
    if exist {
        owner.${CreateAuthor} = sql.NullString{String:value.(string), Valid:true}
    }
    value,exist = src["${CreateDatetime}"]
    if exist {
        owner.${CreateDatetime} = sql.NullString{String:value.(string), Valid:true}
    }
    value,exist = src["${UpdateAuthor}"]
    if exist {
        owner.${UpdateAuthor} = sql.NullString{String:value.(string), Valid:true}
    }
    value,exist = src["${UpdateDatetime}"]
    if exist {
        owner.${UpdateDatetime} = sql.NullString{String:value.(string), Valid:true}
    }
    return owner
}

// 变换为'map'
func (owner *${EntityId}) ToMap() map[string]interface{} {
    tar := make(map[string]interface{})
#foreach (${field} in ${dto.fieldList})
    if owner.${field.fieldIdCap}.Valid {
        tar["${field.fieldIdCap}"] = owner.${field.fieldIdCap}.#renderGoTypeFistCap(${field}) 

    }
#end
    if owner.${CreateAuthor}.Valid {
        tar["${CreateAuthor}"] = owner.${CreateAuthor}.String
    }
    if owner.${CreateDatetime}.Valid {
        tar["${CreateDatetime}"] = owner.${CreateDatetime}.String
    }
    if owner.${UpdateAuthor}.Valid {
        tar["${UpdateAuthor}"] = owner.${UpdateAuthor}.String
    }
    if owner.${UpdateDatetime}.Valid {
        tar["${UpdateDatetime}"] = owner.${UpdateDatetime}.String
    }
    return tar
}

// 从'${DtoId}'创建
func (owner *${EntityId}) FromDto(src ${DtoId}) *${EntityId} {
#foreach (${field} in ${dto.fieldList})
#if (${field.fieldType}=='java.sql.Timestamp' || ${field.fieldType}=='java.sql.Time'|| ${field.fieldType}=='java.sql.Date')
    if src.${field.fieldIdCap} != "" {
        owner.${field.fieldIdCap} = #renderGoSqlType(${field}){#renderGoTypeFistCap(${field}):src.${field.fieldIdCap}, Valid:true}
    }
#else
    owner.${field.fieldIdCap} = #renderGoSqlType(${field}){#renderGoTypeFistCap(${field}):src.${field.fieldIdCap}, Valid:true}
#end
#end
    owner.${CreateAuthor} = sql.NullString{String:src.${CreateAuthor}, Valid:true}
    if src.${CreateDatetime} != "" {
        owner.${CreateDatetime} = sql.NullString{String:src.${CreateDatetime}, Valid:true}
    }
    owner.${UpdateAuthor} = sql.NullString{String:src.${UpdateAuthor}, Valid:true}
    if src.${CreateDatetime} != "" {
        owner.${UpdateDatetime} = sql.NullString{String:src.${UpdateDatetime}, Valid:true}
    }
    return owner
}

// 变换为'${DtoId}'
func (owner *${EntityId}) ToDto() ${DtoId} {
    var tar ${DtoId}
#foreach (${field} in ${dto.fieldList})
#set ($FiledName = "#renderGoType(${field})")
#set ($FieldNameFirstCap = $FiledName.substring(0,1).toUpperCase() + $FiledName.substring(1,$FiledName.length()))
    tar.${field.fieldIdCap} = owner.${field.fieldIdCap}.${FieldNameFirstCap}
#end
    tar.${CreateAuthor} = owner.${CreateAuthor}.String
    tar.${CreateDatetime} = owner.${CreateDatetime}.String
    tar.${UpdateAuthor} = owner.${UpdateAuthor}.String
    tar.${UpdateDatetime} = owner.${UpdateDatetime}.String
    return tar
}

// 创建行数据映射列表
func (owner *${EntityId}) Mapper(entity interface{}) []interface{} {
    e := entity.(*${EntityId})
    return []interface{}{ #foreach(${field} in ${dto.fieldList})&e${Dot}${field.fieldIdCap}#if($foreach.hasNext),#end#end,&e.CreateAuthor,&e.CreateDatetime,&e.UpdateAuthor,&e.UpdateDatetime}
}

// 查询
func (owner *${EntityId}) Retrieve(ctx OrmContext, orderBy ...OrderByCondition) []${EntityId} {
    sqlText, sqlParams := GetDao().BuildSqlSelect(owner, orderBy)
    var nl []${EntityId}
    GetDao().Retrieve(ctx, sqlText, sqlParams[:]...).Mapping(&nl, owner.Mapper)
    return nl
}

// 查询(使用map类型参数查询)
func (owner *${EntityId}) RetrieveByMap(ctx OrmContext, param map[string]interface{}, orderBy ...OrderByCondition) []${EntityId} {
    return owner.FromMap(param).Retrieve(ctx,orderBy[:]...)
}

// 统计
func (owner *${EntityId}) Count(ctx OrmContext) int64 {
    sqlText, sqlParams := GetDao().BuildSqlCount(owner)
    return GetDao().Count(ctx, sqlText, sqlParams[:]...)
}

// 登录
func (owner *${EntityId}) Insert(ctx OrmContext) int64 {
    sqlText, sqlParams := GetDao().BuildSqlInsert(owner)
    return GetDao().Insert(ctx, sqlText, sqlParams[:]...)
}

// 更新
func (owner *${EntityId}) Update(ctx OrmContext) int64 {
    sqlText, sqlParams := GetDao().BuildSqlUpdate(owner)
    return GetDao().Update(ctx, sqlText, sqlParams[:]...)
}

// 删除
func (owner *${EntityId}) Delete(ctx OrmContext) int64 {
    sqlText, sqlParams := GetDao().BuildSqlDelete(owner)
    return GetDao().Delete(ctx, sqlText, sqlParams[:]...)
}



#macro(renderDatabaseTag $field)
`name:"${field.colId}",##
#if (${field.colDataType} == 'AUTO-INCREMENT') type:"INT",##
#else type:"${field.colDataType}",##
#end
 comment:"${field.colName}",##
 key:#if (${field.colPK}=='Y')true#else##
false#end,##
 notnull:#if (${field.colNotNull}=='NOT NULL')true#else##
false#end`
#end


#macro(renderGoSqlType $field)
#if(${field.fieldType}=='String')sql.NullString##
#elseif(${field.fieldType}=='Long' || ${field.fieldType}=='Integer' || ${field.fieldType}=='Short')sql.NullInt64##
#elseif(${field.fieldType}=='Boolean')sql.NullBool##
#elseif(${field.fieldType}=='Double' || ${field.fieldType}=='Float')sql.NullFloat64##
#else##
sql.NullString##
#end##
#end

#macro(renderGoType $field)
#if(${field.fieldType}=='String')string##
#elseif(${field.fieldType}=='Long' || ${field.fieldType}=='Integer' || ${field.fieldType}=='Short')int64##
#elseif(${field.fieldType}=='Boolean')bool##
#elseif(${field.fieldType}=='Double' || ${field.fieldType}=='Float')float64##
#else##
string##
#end##
#end

#macro(renderGoTypeFistCap $field)
#if(${field.fieldType}=='String')String##
#elseif(${field.fieldType}=='Long' || ${field.fieldType}=='Integer' || ${field.fieldType}=='Short')Int64##
#elseif(${field.fieldType}=='Boolean')Bool##
#elseif(${field.fieldType}=='Double' || ${field.fieldType}=='Float')Float64##
#else##
String##
#end##
#end
